----------------------------------ПОСТАВЩИК------------------------------------
---	ПЛАТФОРМЫ ---
100%	Графический дизайн
100%	Добавить/удалить платформу
100%	Сохранить/загрузить платформы
100%	Редактировать платформу(в отдельном диалоге)
100%	При удалении платформы, отцепить ее от компонентов
100%	Добавить порты для видео - VGA(да/нет); DVI(да/нет); HDMI(да/нет)
		
---	КОМПОНЕНТЫ ---
100%	Графический дизайн
100%	Добавить/удалить компонент
100%	Прицепить/отцепить платформы от компонентов
100%	Сохранить/загрузить компоненты
100%	Редактирование компонента(в главном окне) - делегаты
100%	Столбец "маржинальность"
100%	Связать формулами кост, выход и маржу(в диалоге добавления)
100%	Проверка на совпадение имен при добавлении компонента
100%	Массив списков компонентов при передаче в конфигуратор (для сокращения кода)
100%	Картридеры(отдельно от остальных компонентов)
100%	Сокращать поля цен у компонентов до двух знаков
		
---	КОНФИГУРАТОР ---
100%	Графический дизайн
100%	Обновление платформ, компонентов и цен
100%	Ограничения по выбору компонентов и количеству(функции взять из excel версии)
100%	Работа с указателями на компоненты в combobox`ах
100%	Обновление только при добавлении/удалении/изменении платформ/компонентов
100%	Блокировка прокрутки комбобоксов(+прокрутка дальше по виджету)
100%	сохранения геометрии окна(через реестр)
100%	сохранение состояния выбранных комплектующих(через QSettings)
100%	Интегрированное видео(если нет, то видеокарта обязательна)
100%	Интегрированный БП(если есть, то нельзя выбирать дополнительный)
100%	Проверка по мощности видеокарт - "не менее" вместо "более"
100%	Описание платформы(слоты, порты и тд.). Доработать - использовать таблицу HTML.
100%	Сформировать коммерческое предложение(.txt; .doc) + самоувеличивающийся номер КП
		
---	ПЕРЕДАЧА ДАННЫХ ---
100%	Выгрузка в .upl + упаковка в архив
		
---	ОБЩЕЕ ---
100%	При удалении списков правильно освобождать память для компонентов(вызывать деструкторы)
100%	Сохранение при выходе(messagebox)
			(доработать - вызывать только если менялись данные по компонентам)
100%	меню - сохранить данные(.bin)
100%	меню - загрузить данные(.bin)
100%	меню - выгрузить данные(.upl) + Диалог: выбор названия архива(.dbc)
100%	Повторное обновление конфигуратора при старте - необходимо, если отсутствует ini файл.
50%		Проверить утечки памяти(new/delete) + использовать профайлер
100%	избавиться от цифр в размерах массивов 
100%	сделать пустые конструкторы inline(переместить реализацию в .h файлы)
100%	сделать геттеры(и, возможно, другие методы) константными
100%	переделать конструктор для Component(всё в список инициализации)
100%	добавить спецификатор override для виртуальных методов у потомков Component
100%	MyTreeWidget в отдельный файл
100%	подровнять все строки кода(не более 100 символов)
50%		строка состояния("Последнее действие:") + messagebox при ошибках

--------------------------------------КЛИЕНТ-----------------------------------
---	КОНФИГУРАТОР ---
100%	Графический дизайн(взять из версии для поставщика)
100%	Обновление платформ и компонентов(взять из версии для поставщика)
100%	Ограничения по выбору компонентов и количеству(взять из версии для поставщика)
100%	Убрать цены компонентов(только итоговая цена)
100%	Добавить порты для видео - VGA(да/нет); DVI(да/нет); HDMI(да/нет)
100%	Сформировать запрос заказчику(.txt; .doc) + название организации в имени файла
			+ самоувеличивающийся номер запроса
		
---	ПРИЕМ ДАННЫХ ---
100%	Функции для парсинга из .upl
		
---	ОБЩЕЕ ---
100%	Сохранение при выходе(диалог)
100%	меню - загрузить данные(.upl) + предупреждение, что сохраненная конфига будет утеряна
			+ Диалог: выбор архива(.dbc)
100%	При первом запуске спрашивать имя и название организации(сохранять в реестр)
100%	меню - редактировать имя/организацию
100%	меню - сохранить конфигурацию(.ini)
100%	меню - загрузить конфигурацию(.ini)
50%		Проверить утечки памяти(new/delete) + использовать профайлер
100%	сделать пустые конструкторы inline(переместить реализацию в .h файлы)
100%	сделать геттеры(и, возможно, другие методы) константными
100%	переделать конструктор для Component(всё в список инициализации)
100%	добавить спецификатор override для виртуальных методов у потомков Component
100%	подровнять все строки кода(не более 100 символов)
50%		строка состояния("Последнее действие:") + messagebox при ошибках

-------------------------------------------------------------------------------

	ДАЛЬНЕЙШИЕ ВОЗМОЖНЫЕ УЛУЧШЕНИЯ И РЕФАКТОРИНГ:
	Поставщик
		Редактирование названия платформы
		Редактирование названия компонента
		Погрешность при редактировании(из-за погрешности формул)
		qspinbox - заменить сигнал valuechanged на editingfinished.
			(это избавит от необходимости блокировать сигналы, но добавит дополнительный код)
		сделать qmessagebox полем класса, чтобы выделить память для него один раз.
		Обновлять только измененный компонент, а не весь конфигуратор
		Если менялись только цены, то просто пересчитать их
		Выгрузка в .xml
		возможность изменения итоговой цены и итоговой маржинальности
		сохранение данных в ресурсы, а не во внешние файлы
			(проблема со списком платформ у компонентов. возможное решение - xml)
		при удалении/добавлении/редактировании не обновлять всё, а работать с одной строкой
		меню - выгрузить данные(xml)
		привязка платформ к компонентам с помощью указателей
		привязывать компоненты к платформам, а не наоборот
		Списки компонентов в виде массива изначально
		Сделать шаблонный предикат(сравнение компонентов и платформ на равенство по имени).
			использовать алгоритм посиска STL(find_if) для нахождения компонентов и платформ.
			или использовать qFind(для этого переопределить операцию == компонентов/платформ со строкой)
		Применить паттерн "шаблонный метод" для компонентов.
		Использовать QMap<QString, QList<Component*>* > вместо массивов
		Использовать хэш таблицу для быстрого поиска компонентов.
		Использовать базу данных.
		Разобраться со слотами и паблик функциями(либо всё в слоты, коннектить и вызывать через emit;
			либо всё в паблик функции и вызывать в MainWindow)
		Проверить работоспособность приложения, если не установлен MS Office
			
	Клиент
		При выборе компонентов показывать в списке будущее изменение итоговой цены(напр.: "ddr3 2gb" +73$)
		Внешний вид(css)
		Функции для парсинга из .xml
		меню - сформировать запрос заказчику(.ini) - для этого придется делать проверку версий БД
			у заказчика и клинта
		меню - загрузить данные(.xml)
		при загрузке использовать временные переменные
			(чтобы не потерять данные при ошибке чтения файлов)
		при провальной попытке добавления новой комплектующей, программа все равно фиксирует
			изменения и при выходе предлагает сохранить(проблема в двойной проверке - сначала
			до увеличения кол-ва, потом - после)
		Сделать шаблонный предикат(сравнение компонентов/платформ на равенство по имени).
			использовать алгоритм посиска STL(find_if) для нахождения компонентов/платформ.
			или использовать qFind(для этого переопределить операцию == компонентов/платформ со строкой)
		Применить паттерн "шаблонный метод" для компонентов.
		Использовать QMap<QString, QList<Component*>* > вместо массивов
		Использовать хэш таблицу для быстрого поиска компонентов.
		Использовать базу данных.
		Разобраться со слотами и паблик функциями(либо всё в слоты, коннектить и вызывать через emit;
			либо всё в паблик функции и вызывать в MainWindow)
		Проверить работоспособность приложения, если не установлен MS Office
